## 4/7/20
recursion is when something can be defined inside it self, i.e. a node
    node consists of a value and a next node
loops and recursions essentially do the same thing

doing a factorial recursive function:
public factorial(int n){
    if (n != 0)
        return n * factorial(n-1);
    else
        return 1;
}

doing a fibonacci recursive function (sum of the two numbers before it e.g. 1 1 2 3 5 8 13):


public fibonacci(int n ){
    if (n == 1 || n == 0)
        return 1;
    else
        return fibonacci(n-1) + fibonacci(n-2);
}

if on the 0 index, left side = 0
if on the last index, right side = 0

--------------------------------------------
## 4/14/19

135479 = 1+3+5+4+7+9
29 == sumOfDigits(135469)

base case for sum of digits:
    if the digit is 1 - 9, then the sumofdigits is just the digit

int sumOfDigits(int x){
    if (x <= 9) return x;
    else{
        int digit = x % 10;
        int leftover = x /10;
        return digit + sumOfDigits(leftover);
    }
}

pascal triangle(row, col)
base case:
    if col = 1, then return 1
    if col == row, then return 1 as well
general case
    return pascalTriangle(row - 1, col) + pascalTriangle(row - 1, col - 1);


for array list
import.java.util.ArrayList;
ArrayList<Card> deck = new ArrayList<Card>();      #setting up arraylist
Card c1 = new Card('A', 'S');
deck.add(c1);
deck.add(Card('2', 'S'));

ArrayList<Integer> pyramid = ArrayList<Integer>();
pyramid.add(4);
pyramid.add(6);
pyramid.add(2);
int p0 = pyramid.get(0);
